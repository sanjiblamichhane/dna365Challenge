Reference: https://towardsdatascience.com/solving-travelling-salesperson-problems-with-python-5de7e883d847

SOLVING TRAVELLING SALESPERSON PROBLEM WITH PYTHON

- mlrose: Machine Learning, Randomized Optimized SEarch
	--> python package we're using
	why?
	--> helps in randomization and search algorithms.
	--> helos in optimization domain problems

WHAT IS A TRAVELLING SALESPERSON PROBLEM?
		^
		TSP
	- this is a classic optimization problem
	- goal: to determine the shortest tour of a collection of n cities.(aka nodes)
	- we need to start and end at the same city
	- every city must be visited exactly once.

	- solution can be represented by a vector of n integers --> 0 to n-1
	- the order of solution will be in the order in which the cities are visited.

	....

	- TSP is a NP-hard problem
		   ^ 
		   Non-deterministic Polynomial
		   ^
		   - this is a complexity class
		   - used to classify decision problems
		   - mathematically, it is a set of decision problems solvable in polynomial time by a non-deterministic Turing Machine.
	
	- TSPs are best suited for solving randomized optimization algorithms.


	Example:

		4


	3
				2

			5
					
			
		0


	6

	- Let's assume each digit represent the cities a salesman intend to travel.
	- Keep in mind, s/she must travel these cities
exactly once in the shortest time possible by travelling the shortest distance.
	- One possible route might be that [ 0, 6, 3, 5, 2, 4]. 
	- Are we sure that this is the optimized route?
		--> we don't know yet.
	- of course, we assume that he begins at 0 and ends at 0.

SOLVING TSPs WITH mlrose
	
	- since the solution can be represented in the vector form of 0 to n-1,
	- we can define a discrete-state optimization problem object,
	- and use mlrose's randomized optimized search algorithms to solve it.

	WHAT IS A DISCRETE-STATE OPTIMIZED PROBLEM?
	- a problem where
	- each element of the state vector can only take a discrete set of values.
	- in mlrose, the values are assumed to be integers in the range of 0 to (max_val -1).
	- max_val will be defined at initialization.


	- So, defining a problem in this way, do we have a risk that we visit some cities more than once and some other not at all?
		==> Yes! 
	- Therefore, this is not the best way to define the problem.
	- Let's look at an alternative way to define this problem.
	- we can define and optimization problem object that only allows us to consider valied tours of n cities as potential solutions.
	- this approach is much more efficient.
	- we need to use TSPOpt() class of the mlrose package.

	...

	STEPS:
		1. Define a fitness function object.
		2. Define an optimization problem object.
		3. Select and run a randomized optimization algorithm.
	
	(1): HOW TO DEINE A FITNESS FUNCITON OBJECT?
	 - remember, the goal is to find the shortest tour of the eight cities.
	 - as a result, the fitness function should calculate the total length of a given tour.
	 - this is the fitness definition used in mlrose's pre-defined TravellingSales() class.
	 - TSPOpt():
	 	- optimization class
		- assumes by default that TravellingSales() class is used to defin the fitness function for a TSP.
		- as a result, if TavellingSales() class is to be used to define the fintness function object, this step can be skipped.
		- we can also manually assign the fitness function object if we want.

		
		HOW TO INITIALIZE A FITNESS FUNCTION OBJECT for the TravellingSales() CLASS?
		- it is necessary to specify either the (x, y) coordinates of all the cities or the distances between each pair of cities for which the travel is possible.
		- if the former is specified, then it is assumed that travel between each pair of cities is possible and that the distance betwee the pairs of cities is the Euclidean distance.
										^
										Pythagorean distance.

